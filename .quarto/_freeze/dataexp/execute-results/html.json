{
  "hash": "98ca3896cf0107f829cd070390e28a9d",
  "result": {
    "markdown": "# Data Exploration with `dplyr` {#sec-dataexp}\n\nThe `dplyr` package is a great tool for organizing and manipulating our dataframe. Note, I use the term *manipulate* not to convey anything nefarious or unethical, but in the sense of *data management*. The functions of this package are named after useful verbs, making them relatively easy to remember. Some common `dplyr` functions are listed in @tbl-dplyrf.\n\n| `dplyr` Function | Description                                                   |\n|-------------------|-----------------------------------------------------|\n| `arrange()`      | Change the order of rows.                                     |\n| `filter()`       | Select rows based on column values.                           |\n| `mutate()`       | Change the values in certain columns, and create new columns. |\n| `relocate()`     | Change the order of columns.                                  |\n| `rename()`       | Change the name of columns.                                   |\n| `select()`       | Include or exclude a column.                                  |\n| `slice()`        | Select rows based on location.                                |\n| `summarise()`    | Collapse a group into a single row.                           |\n| `group_by()`     | Select a grouping variable to perform an operation by group.  |\n\n: dplyr's useful functions with their description. {#tbl-dplyrf}\n\nLet's look at some examples with the built-in `mtcars` dataframe.\n\n## Filter() & Arrange()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Load mtcars dataframe. Assign it to an object.\ndf <- mtcars\n\n# Let's look at cars with only eight cylinders.\ndf %>%\n  filter(cyl == 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n```\n:::\n\n```{.r .cell-code}\n# Let's add to that, and order the dataframe by mpg in descending order (highest to lowest). To do this, we embed the desc() function within arrange(). For ascending order, no need for the desc() function.\n\ndf %>%\n  filter(cyl == 8) %>%\n  arrange(desc(mpg))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n```\n:::\n:::\n\n\n## Mutate() & Rename()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now let's add a new column called kpl (kilometers per litre) using mutate(). A quick Google search tells me that going from mpg to kpl involves dividing mpg by 2.352.  \n\ndf %>%\n  filter(cyl == 8) %>%\n  arrange(desc(mpg)) %>%\n  mutate(kpl = mpg / 2.352) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl  disp  hp drat    wt  qsec vs am gear carb      kpl\nPontiac Firebird  19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 8.163265\nHornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 7.950680\nMerc 450SL        17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 7.355442\nMerc 450SE        16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 6.972789\nFord Pantera L    15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 6.717687\nDodge Challenger  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 6.590136\n```\n:::\n\n```{.r .cell-code}\n# Let's add a new name for the wt variable called weight.\ndf %>%\n  filter(cyl == 8) %>%\n  arrange(desc(mpg)) %>%\n  mutate(kpl = mpg / 2.352) %>%\n  rename(weight = wt) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl  disp  hp drat weight  qsec vs am gear carb      kpl\nPontiac Firebird  19.2   8 400.0 175 3.08  3.845 17.05  0  0    3    2 8.163265\nHornet Sportabout 18.7   8 360.0 175 3.15  3.440 17.02  0  0    3    2 7.950680\nMerc 450SL        17.3   8 275.8 180 3.07  3.730 17.60  0  0    3    3 7.355442\nMerc 450SE        16.4   8 275.8 180 3.07  4.070 17.40  0  0    3    3 6.972789\nFord Pantera L    15.8   8 351.0 264 4.22  3.170 14.50  0  1    5    4 6.717687\nDodge Challenger  15.5   8 318.0 150 2.76  3.520 16.87  0  0    3    2 6.590136\n```\n:::\n:::\n\n\n## Select() & Slice()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's now only select a few variables using select()\n\ndf %>%\n  select(mpg, cyl, wt) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl    wt\nMazda RX4         21.0   6 2.620\nMazda RX4 Wag     21.0   6 2.875\nDatsun 710        22.8   4 2.320\nHornet 4 Drive    21.4   6 3.215\nHornet Sportabout 18.7   8 3.440\nValiant           18.1   6 3.460\n```\n:::\n\n```{.r .cell-code}\n## If we want to select all but a few variables, we can still use select. Let's say I want all variables except mpg, cyl, and wt. I just need to add a minus before each variable name.\n\ndf %>%\n  select(-mpg, -cyl, -wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     disp  hp drat  qsec vs am gear carb\nMazda RX4           160.0 110 3.90 16.46  0  1    4    4\nMazda RX4 Wag       160.0 110 3.90 17.02  0  1    4    4\nDatsun 710          108.0  93 3.85 18.61  1  1    4    1\nHornet 4 Drive      258.0 110 3.08 19.44  1  0    3    1\nHornet Sportabout   360.0 175 3.15 17.02  0  0    3    2\nValiant             225.0 105 2.76 20.22  1  0    3    1\nDuster 360          360.0 245 3.21 15.84  0  0    3    4\nMerc 240D           146.7  62 3.69 20.00  1  0    4    2\nMerc 230            140.8  95 3.92 22.90  1  0    4    2\nMerc 280            167.6 123 3.92 18.30  1  0    4    4\nMerc 280C           167.6 123 3.92 18.90  1  0    4    4\nMerc 450SE          275.8 180 3.07 17.40  0  0    3    3\nMerc 450SL          275.8 180 3.07 17.60  0  0    3    3\nMerc 450SLC         275.8 180 3.07 18.00  0  0    3    3\nCadillac Fleetwood  472.0 205 2.93 17.98  0  0    3    4\nLincoln Continental 460.0 215 3.00 17.82  0  0    3    4\nChrysler Imperial   440.0 230 3.23 17.42  0  0    3    4\nFiat 128             78.7  66 4.08 19.47  1  1    4    1\nHonda Civic          75.7  52 4.93 18.52  1  1    4    2\nToyota Corolla       71.1  65 4.22 19.90  1  1    4    1\nToyota Corona       120.1  97 3.70 20.01  1  0    3    1\nDodge Challenger    318.0 150 2.76 16.87  0  0    3    2\nAMC Javelin         304.0 150 3.15 17.30  0  0    3    2\nCamaro Z28          350.0 245 3.73 15.41  0  0    3    4\nPontiac Firebird    400.0 175 3.08 17.05  0  0    3    2\nFiat X1-9            79.0  66 4.08 18.90  1  1    4    1\nPorsche 914-2       120.3  91 4.43 16.70  0  1    5    2\nLotus Europa         95.1 113 3.77 16.90  1  1    5    2\nFord Pantera L      351.0 264 4.22 14.50  0  1    5    4\nFerrari Dino        145.0 175 3.62 15.50  0  1    5    6\nMaserati Bora       301.0 335 3.54 14.60  0  1    5    8\nVolvo 142E          121.0 109 4.11 18.60  1  1    4    2\n```\n:::\n\n```{.r .cell-code}\n# If we want to select certain rows of a dataframe, we can do this with slice() by mentioning the index number of the columns. If we want to know the row number based on a column value (e.g. mpg > 20), we can use the which() function where you can write the column, relational operator, and value.\n\nwhich(df$mpg > 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  8  9 18 19 20 21 26 27 28 32\n```\n:::\n\n```{.r .cell-code}\ndf %>%\n  slice(1:4,\n        8,\n        9,\n        18:21,\n        26:28,\n        32) %>%\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n:::\n\n```{.r .cell-code}\n# Similarly, if you want to know which rows have the value 'NA' which indicates missing data for a particular column, we can wrap the is.na() function within the which() function like this.\n\n## Let's add some NAs to the disp variable first.\n\ndf[c(5,8,21:22), 3] <- NA\n\n## Now we will see which rows in disp have NA. \n\nwhich(is.na(df$disp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5  8 21 22\n```\n:::\n\n```{.r .cell-code}\n## Often we want to know the highest and lowest values of a variable. We can use slice_min() for the lowest values and slice_max() for the highest values. The first argument is the column and the second is how many rows you want (e.g. n = 5).\n\n## The five cars with the lowest mpg.\n\ndf %>%\n  slice_min(mpg, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl disp  hp drat    wt  qsec vs am gear carb\nCadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4\nCamaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4\nDuster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4\nChrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4\n```\n:::\n\n```{.r .cell-code}\n## The five cars with the highest mpg.\n\ndf %>%\n  slice_max(mpg, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                mpg cyl disp  hp drat    wt  qsec vs am gear carb\nToyota Corolla 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat 128       32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4 75.7  52 4.93 1.615 18.52  1  1    4    2\nLotus Europa   30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2\nFiat X1-9      27.3   4 79.0  66 4.08 1.935 18.90  1  1    4    1\n```\n:::\n:::\n\n\n## Relocate() and Summarise()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If I want to change the order of how some columns appear in the dataframe, I can do so with relocate() where the first argument is the column(s) to move, and the second argument specifies the intended new location with either .before or .after to indicate where you want to place the columns. \n\n## Let's move wt to the front.\n\ndf %>%\n  relocate(wt, .before = everything()\n           )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       wt  mpg cyl  disp  hp drat  qsec vs am gear carb\nMazda RX4           2.620 21.0   6 160.0 110 3.90 16.46  0  1    4    4\nMazda RX4 Wag       2.875 21.0   6 160.0 110 3.90 17.02  0  1    4    4\nDatsun 710          2.320 22.8   4 108.0  93 3.85 18.61  1  1    4    1\nHornet 4 Drive      3.215 21.4   6 258.0 110 3.08 19.44  1  0    3    1\nHornet Sportabout   3.440 18.7   8    NA 175 3.15 17.02  0  0    3    2\nValiant             3.460 18.1   6 225.0 105 2.76 20.22  1  0    3    1\nDuster 360          3.570 14.3   8 360.0 245 3.21 15.84  0  0    3    4\nMerc 240D           3.190 24.4   4    NA  62 3.69 20.00  1  0    4    2\nMerc 230            3.150 22.8   4 140.8  95 3.92 22.90  1  0    4    2\nMerc 280            3.440 19.2   6 167.6 123 3.92 18.30  1  0    4    4\nMerc 280C           3.440 17.8   6 167.6 123 3.92 18.90  1  0    4    4\nMerc 450SE          4.070 16.4   8 275.8 180 3.07 17.40  0  0    3    3\nMerc 450SL          3.730 17.3   8 275.8 180 3.07 17.60  0  0    3    3\nMerc 450SLC         3.780 15.2   8 275.8 180 3.07 18.00  0  0    3    3\nCadillac Fleetwood  5.250 10.4   8 472.0 205 2.93 17.98  0  0    3    4\nLincoln Continental 5.424 10.4   8 460.0 215 3.00 17.82  0  0    3    4\nChrysler Imperial   5.345 14.7   8 440.0 230 3.23 17.42  0  0    3    4\nFiat 128            2.200 32.4   4  78.7  66 4.08 19.47  1  1    4    1\nHonda Civic         1.615 30.4   4  75.7  52 4.93 18.52  1  1    4    2\nToyota Corolla      1.835 33.9   4  71.1  65 4.22 19.90  1  1    4    1\nToyota Corona       2.465 21.5   4    NA  97 3.70 20.01  1  0    3    1\nDodge Challenger    3.520 15.5   8    NA 150 2.76 16.87  0  0    3    2\nAMC Javelin         3.435 15.2   8 304.0 150 3.15 17.30  0  0    3    2\nCamaro Z28          3.840 13.3   8 350.0 245 3.73 15.41  0  0    3    4\nPontiac Firebird    3.845 19.2   8 400.0 175 3.08 17.05  0  0    3    2\nFiat X1-9           1.935 27.3   4  79.0  66 4.08 18.90  1  1    4    1\nPorsche 914-2       2.140 26.0   4 120.3  91 4.43 16.70  0  1    5    2\nLotus Europa        1.513 30.4   4  95.1 113 3.77 16.90  1  1    5    2\nFord Pantera L      3.170 15.8   8 351.0 264 4.22 14.50  0  1    5    4\nFerrari Dino        2.770 19.7   6 145.0 175 3.62 15.50  0  1    5    6\nMaserati Bora       3.570 15.0   8 301.0 335 3.54 14.60  0  1    5    8\nVolvo 142E          2.780 21.4   4 121.0 109 4.11 18.60  1  1    4    2\n```\n:::\n\n```{.r .cell-code}\n## Let's move wt to before disp.\n\ndf %>%\n  relocate(wt, .before = disp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl    wt  disp  hp drat  qsec vs am gear carb\nMazda RX4           21.0   6 2.620 160.0 110 3.90 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 2.875 160.0 110 3.90 17.02  0  1    4    4\nDatsun 710          22.8   4 2.320 108.0  93 3.85 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 3.215 258.0 110 3.08 19.44  1  0    3    1\nHornet Sportabout   18.7   8 3.440    NA 175 3.15 17.02  0  0    3    2\nValiant             18.1   6 3.460 225.0 105 2.76 20.22  1  0    3    1\nDuster 360          14.3   8 3.570 360.0 245 3.21 15.84  0  0    3    4\nMerc 240D           24.4   4 3.190    NA  62 3.69 20.00  1  0    4    2\nMerc 230            22.8   4 3.150 140.8  95 3.92 22.90  1  0    4    2\nMerc 280            19.2   6 3.440 167.6 123 3.92 18.30  1  0    4    4\nMerc 280C           17.8   6 3.440 167.6 123 3.92 18.90  1  0    4    4\nMerc 450SE          16.4   8 4.070 275.8 180 3.07 17.40  0  0    3    3\nMerc 450SL          17.3   8 3.730 275.8 180 3.07 17.60  0  0    3    3\nMerc 450SLC         15.2   8 3.780 275.8 180 3.07 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 5.250 472.0 205 2.93 17.98  0  0    3    4\nLincoln Continental 10.4   8 5.424 460.0 215 3.00 17.82  0  0    3    4\nChrysler Imperial   14.7   8 5.345 440.0 230 3.23 17.42  0  0    3    4\nFiat 128            32.4   4 2.200  78.7  66 4.08 19.47  1  1    4    1\nHonda Civic         30.4   4 1.615  75.7  52 4.93 18.52  1  1    4    2\nToyota Corolla      33.9   4 1.835  71.1  65 4.22 19.90  1  1    4    1\nToyota Corona       21.5   4 2.465    NA  97 3.70 20.01  1  0    3    1\nDodge Challenger    15.5   8 3.520    NA 150 2.76 16.87  0  0    3    2\nAMC Javelin         15.2   8 3.435 304.0 150 3.15 17.30  0  0    3    2\nCamaro Z28          13.3   8 3.840 350.0 245 3.73 15.41  0  0    3    4\nPontiac Firebird    19.2   8 3.845 400.0 175 3.08 17.05  0  0    3    2\nFiat X1-9           27.3   4 1.935  79.0  66 4.08 18.90  1  1    4    1\nPorsche 914-2       26.0   4 2.140 120.3  91 4.43 16.70  0  1    5    2\nLotus Europa        30.4   4 1.513  95.1 113 3.77 16.90  1  1    5    2\nFord Pantera L      15.8   8 3.170 351.0 264 4.22 14.50  0  1    5    4\nFerrari Dino        19.7   6 2.770 145.0 175 3.62 15.50  0  1    5    6\nMaserati Bora       15.0   8 3.570 301.0 335 3.54 14.60  0  1    5    8\nVolvo 142E          21.4   4 2.780 121.0 109 4.11 18.60  1  1    4    2\n```\n:::\n\n```{.r .cell-code}\n## Let's move wt to after qsec\n\ndf %>%\n  relocate(wt, .after = qsec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     mpg cyl  disp  hp drat  qsec    wt vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 16.46 2.620  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 17.02 2.875  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 18.61 2.320  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 19.44 3.215  1  0    3    1\nHornet Sportabout   18.7   8    NA 175 3.15 17.02 3.440  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 20.22 3.460  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 15.84 3.570  0  0    3    4\nMerc 240D           24.4   4    NA  62 3.69 20.00 3.190  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 22.90 3.150  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 18.30 3.440  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 18.90 3.440  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 17.40 4.070  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 17.60 3.730  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 18.00 3.780  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 17.98 5.250  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 17.82 5.424  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 17.42 5.345  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 19.47 2.200  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 18.52 1.615  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 19.90 1.835  1  1    4    1\nToyota Corona       21.5   4    NA  97 3.70 20.01 2.465  1  0    3    1\nDodge Challenger    15.5   8    NA 150 2.76 16.87 3.520  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 17.30 3.435  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 15.41 3.840  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 17.05 3.845  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 18.90 1.935  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 16.70 2.140  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 16.90 1.513  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 14.50 3.170  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 15.50 2.770  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 14.60 3.570  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 18.60 2.780  1  1    4    2\n```\n:::\n\n```{.r .cell-code}\n# Let's use the summarise() and group_by() functions to get a summary of the weight of each car (wt) grouped by cylinders (cyl), and rounded to two decimal places.\n\ndf %>%\n  group_by(cyl) %>%\n  summarise(mean_weight = mean(wt)) %>%\n  round(digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n    cyl mean_weight\n  <dbl>       <dbl>\n1     4        2.29\n2     6        3.12\n3     8        4   \n```\n:::\n:::\n\n\nThus, we can see that the `dplyr` package offers several useful functions to manage our data. Remember, that if you want any changes to be reflected in your dataframe, such as renaming a variable, remember to assign your `dplyr` code to your dataframe. For example, if I want the name change for `wt` to `weight` to stick, I would assign that to the dataframe like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>%\n  rename(weight = wt)\n```\n:::\n\n\n![](Images/manx2.png)\n\n## Exercises {#sec-tidyex}\n\nAs always, it's a good idea to attempt these while the material is still fresh. You can find the answers in @sec-appendixtidyexp.\n\n1.  Load the `tidyverse` package. Then assign the built-in dataframe `starwars` to an object named whatever you want. Then subset the dataframe by human species only. Save the subsetted dataframe as an object called `swhuman`. Then calculate and report the mean and median height in `swhuman`. Also report an NAs (missing data) in the height variable. *Note: the units for the height variable are centimeters.*\n\n2.  Hopefully you noticed that there are indeed some NAs in the `swhuman` dataframe! Detect which rows have NAs for the height variable, and write the names of the characters that have this. Next, let's fix these errors. Perform an internet search and populate those NAs with plausible values. If you need to convert from feet to centimeters, multiply the value in feet by 30.48. If you absolutely cannot find the height of any character substitute the median height from Question 1 for their height.\n\n3.  Once you have filled in this missing data, calculate the new mean and median for the height variable. Comment on how much of a difference the additional values made on the mean and median compared with the values you calculated in Question 1. Then determine the three shortest characters, and three tallest characters.\n\n4.  Return to the larger `starwars` dataframe or whatever object to which you assigned it. Determine which characters have NA for height. If there are any characters with NA for height (hint: there are), enter plausible values for their heights using the approach taken in Question 2. Then report the mean and median height across everyone in this dataframe.\n\n5.  Still working with the `starwars` dataframe, convert the `species` variable to factor. Then, group and summarise the mean height by species, and print this in descending order. Report which species is the tallest, on average. Then, rearrange and report the species which is the shortest, on average.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}