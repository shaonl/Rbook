{"title":"Strings & Comparisons","markdown":{"headingText":"Strings & Comparisons","headingAttr":{"id":"sec-ops","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n## Strings\n\n![](images/strings.png)\n\nAs we discussed in @sec-dts, character values are stored in objects known as *strings* in R. Let's go over a few key things with strings.\n\nFirst, let's remember that string values are surrounded by quotes, such as `x <- \"Hello, World\"`. These can also be single quotes, such as `y <- 'Hello, World'.` However, you CANNOT combine double quotes on one end of the value and single quotes on the other, such as `z <- 'Hello, World\"`. So, make sure you are consistent. I recommend using double quotes consistently, as R will always print and store the value with double quotes, even if you store the variable using single quotes.\n\nWhat if you want to store quote within a quote? In this case, you can use the standard grammar rules of American English. According to [Brittney Ross from *grammarly*](https://www.grammarly.com/blog/quotation-within-quotation/#:~:text=In%20American%20English%2C%20use%20double,marks%20for%20quotations%20within%20quotations.), in American English, we use double quotation marks for quotes, and single quotation marks for quotes within quotes. Here's an example.\n\n```{r}\na <- \"Invoking the Bard, she replied 'To thine own self be true.'\"\na\n```\n\nNotice that simply running the object name returns its value, in the same way that `print()`does. We can check the length of a string with the `nchar()` function.\n\n```{r}\nnchar(a)\n```\n\nWe can also check if a character or sequence of characters exist in a given string using the `grepl()` function, in which the first argument is the character/sequence of interest, and the second argument is the string. Evaluating this expression returns a logical value.\n\n```{r}\ngrepl(\"Bard\", a)\ngrepl(\"Z\", a)\n\n```\n\nTo combine strings, we can use the `paste()` function, where the arguments are the string objects to be combined. This is also called *concatenating* or *merging* multiple strings.\n\n```{r}\n# Let's create two new string objects b and c.\n\nb <- \"Demurely and without hesitation, I invoked Jonson 'There is no greater hell than to be a prisoner of fear.'\"\n\nc <- \"That ended the conversation rather quickly.\"\n\n# Now we combine the three\n\nd <- paste(a,b,c)\n\nd\n```\n\nNote that the `paste()` function concatenates strings with a space by default. If we don't want spaces by default, we can use the `paste0()` function which does not separate strings by spaces, by default.\n\n```{r}\n\npaste0(\"Remove\", \"All\", \"Spaces\", \"Now\", \"!\", \"!\", \"!\")\n```\n\nThe `stringr` package also has a number of useful functions for manipulating strings. One thing I find especially helpful in this package is the ability to convert the characters in a string to lowercase, uppercase, or title case. This is especially helpful if you have values with inconsistent punctuation. Here's an example.\n\n```{r}\n# A string with inconsistent punctuation\nlibrary(stringr)\n\ne <- \"WOW, tHiS Is qUiTE a mESsY oNe.\"\n\n# Let's str_to_lower() function to make all characters lowercase.\n\nf <- str_to_lower(e)\nf\n\n# Now we use the str_to_upper() function to make all characters uppercase. \n\ng <- str_to_upper(f)\ng\n\n# Finally, we use the str_to_title() function to make all characters title case.\n\nh <- str_to_title(g)\nh\n```\n\nSometimes you have a string or vector of strings for which you want to apply a broad-sweeping change. This commonly happens with variable names or values, and sometimes, you want to write code to make changes to a number of values without changing the values one-by-one. In this case, the `sub()` and `gsub()` functions are very useful. These functions take the first argument as the pattern to match, the second as the thing you want to replace the pattern with, and the third is the dataframe or vector you are modifying. The main difference between `sub()` and `gsub()` is that `sub()` only modifies the first match in an individual string or vector, whereas `gsub()` modifies all matches in a particular string or vector. I tend to use `gsub()` more often than `sub()`, but use what works for you. Let's see how it works.\n\n```{r}\n# First let's create a vector of strings.\n\nintro <- c(\"Hello, my name is Jamal.\")\nprint(intro)\n\n# Let's say I want to substitute another name for Jamal here. The gsub() function helps me do that. \n\ngsub('Jamal', \"Monica\", intro)\n\n# If you want to add a prefix to a vector of strings based on a particular pattern, you can use the weird symbol combination .*^ (period asterisk caret) as the first argument.\n\ngsub(\".*^\", \"Welcome and \", intro)\n\n# Finally, let's work with a dataframe.\n\ndf <- data.frame(id = 1:4,\n                     gender = c(\"male\", \"female\", \"transgender\", \"non-binary\"),\n                     state = c(\"California\", \"Pennsylvania\", \"New York\", \"Georgia\")\n                     )\nhead(df)\n\n# Let's change all the gender values to abbreviations.\n\ndf$gender <- gsub(\"female\", \"F\", df$gender)\ndf$gender <- gsub(\"male\", \"M\", df$gender)\ndf$gender <- gsub(\"transgender\", \"T\", df$gender)\ndf$gender <- gsub(\"non-binary\", \"NB\", df$gender)\n\nhead(df)\n\n# Looks good. Now let's change all the state names to their abbreviations. \n\ndf$state <- gsub(\"California\", \"CA\", df$state)\ndf$state <- gsub(\"Pennsylvania\", \"PA\", df$state)\ndf$state <- gsub(\"New York\", \"NY\", df$state)\ndf$state <- gsub(\"Georgia\", \"GA\", df$state)\n\nhead(df)\n\n# You can also substitute a blank space for any value with gsub()\n\ndf$state <- gsub(\"CA\", \" \", df$state)\ndf$state\n```\n\nWhen it comes to substituting strings, it's better to test replacement code on a smaller set of values before expanding to all the values you want to modify. This will avoid errors.\n\n## Comparisons\n\n![](images/comparisons.png)\n\nVery often we are interested in comparing two quantities in R. For instance, we may compare a variable to a value, or two variables to one another. We can also use Boolean operators in constructing our comparisons. Boolean operators are words like *AND*, *NOT*, and *OR* that are used as conjunctions commonly to create advanced search terms. However, we can also use them in creating comparisons.\n\n### Comparison Operators\n\nTo start, let us remind ourselves of common operators used in comparisons, as well as the three common Boolean operators, seen in @tbl-ops.\n\n| Operator (R code) | Description              |\n|-------------------|--------------------------|\n| ==                | Equals to                |\n| !=                | Not equal to             |\n| \\<                | Less than                |\n| \\>                | Greater than             |\n| \\<=               | Less than or equal to    |\n| \\>=               | Greater than or equal to |\n| !                 | NOT                      |\n| \\|                | OR                       |\n| &                 | AND                      |\n\n: Operators used for comparisons in R. {#tbl-ops}\n\nYou can use these to compare values or objects. Comparisons result in a logical value being returned.\n\n```{r}\n# Comparing values\n\n12 > 4\n\n4.32 == (16.03/4)\n\npi^pi <= (4 * pi) / (pi + 4)\n\n# Comparing objects\n\na <- 453\n\nb <- 4 * 23\n\na >= b\n\n## The objects being can be vectors of the same length. This will return a vector of logical values.\n\nc <- mtcars$mpg > mtcars$wt\nprint(c)\n\n# Booleans can be used to create multiple conditions for the comparison.\n\nd <- 500\ne <- 50\n\n# This evaluates to FALSE becase d > 100.\nd < 100 & e < 100\n\n# This evaluates to TRUE because at least one of {d,e} < 100. \nd < 100 | e < 100\n\n# This evaluates to TRUE because d > e.  \n\nd != e\n\n```\n\n### Comparisons in Conditional Statements\n\nComparisons are commonly used within `if` and `if else` statements. These are conditional statements that specify a condition that must be satisfied, and then list rules for what happens if the condition is satisfied and what happens when it is not satisfied. The logic of the `if else` statement in show in @fig-ifelse.\n\n![The simple and elegant logic of the If Else statement.](images/ifelse.png){#fig-ifelse}\n\nLet's have a look at some simple If Else statements involving comparisons. Note that the If and Else blocks are surrounded by curly braces `{ }`.\n\n```{r}\n\n# First, we create some variables.\n\nf <- 25\ng <- 50\nh <- 10\n\n# Now let's try a simple If Else statement comparing the variables.\n\nif (g < f) {                     # Here comes the If block\n  print(\"g is less than f\")\n} else {                         # Here comes the Else block\n  print(\"g is greater than f\")\n}\n\n\nif (g < h) {                     # Here comes the If block\n  print(\"g is less than h\")\n} else {                         # Here comes the Else block\n  print(\"g is not less than h\")\n}\n\n```\n\nWe can also add more conditions with the `else if` statement, which basically tells R \"If the previous condition is not true, here's another condition with a rule.\" Let's add an Else If statement to the example above.\n\n```{r}\n# First, we create some variables.\n\nf <- 25\ng <- 50\ni <- 50\n\n# Now we add some Else If statements to our IF statement.\n\nif (g < i) {\n  print(\"g is less than i\")\n} else if (g > i) {\n  print(\"g is greater than i\")\n} else if (g == i) {\n  print(\"g is equal to i\")\n}\n\n# You might say that the third Else If condition above can just be an Else statement, since if g !< i & g !> i, it must be that g == i. This is true! Let's write it that way.\n\nif (g < i) {\n  print(\"g is less than i\")\n} else if (g > i) {\n  print(\"g is greater than i\")\n} else {\n  print(\"g is equal to i\")\n}\n\n```\n\nWe can also add the AND operator `&` and OR operator `|` to the conditional statements.\n\n```{r}\n# Let's create some variables.\n\nj <- 100\nk <- 200\nl <- 150\n\n# Now we use & (AND) in our if else statement.\n\nif (j < l & j < k) {\n  print(\"j is the lowest\")\n} else if (j > l & j > k) {\n  print(\"j is the highest\")\n} else {\n  print(\"j is the middle value\")\n}\n\n# Now we use | (OR) in our if else statement.\n\nif (l < k | l < j) {\n  print(\"l is less than at least one other value\")\n} else {\n  print(\"l is the highest\")\n}\n\n```\n\nThat about wraps it up for Strings and Comparisons. As always, don't forget to...\n\n![](images/manx2.png)\n\n## Exercises {#sec-sboex}\n\nAs always, it's a good idea to attempt these while the material is still fresh. You can find the answers in @sec-appendixops.\n\n1.  Create a variable called `MarySue1` with the value `\"Dr Mary Sue Coleman, former president of the University of Michigan once said\"`. Then, create another variable called `MarySue2` with the value `\"For today, goodbye. For tomorrow, good luck. And Forever, Go Blue!\"`. Then find the number of characters in each variable using the `nchar()` function. Then, check if the letter 'r' is present in each variable, and report the results.\n\n2.  Create a variable called `MarySue3` whose value is a concatenation (combination) of `MarySue1` and `MarySue2`. Then, print the value for `MarySue3`.\n\n3.  Create a string vector called `basho` and assign it the value `\"An old silent pond. A frog jumps into the pond—Splash! Silence again.\"` Then create and print another variable called `basho2` in which the word 'frog' has been replaced by 'buffalo', and the word 'Splash!' has been replaced by 'Yikes!'.\n\n4.  Let's do a variation of Mad Libs I will call Mad Sentences. Install and load the `keyToEnglish` package (be mindful of the capitalization in this package's name). Then create three variables named after your three favorite cuisines. For each variable, assign the value `generate_random_sentences(n = 2, punctuate = TRUE)` to generate two random sentences per variable. This will produce a total of six sentences (two per variable). Finally, create a variable called `madsentences` whose value combines (pastes) all three variables. Print `madsentences`. If it sounds nonsensical, then it worked!\n\n5.  Let's compare the returns from simple vs compound interest after five years. First, define `p` as `1000`, `r` as `.07` and `t` as 5. Then Create a variable called `simple` with the value `p * r * t`. Next, create a variable `compound` with the value `p * (1 + r)^t - p`. Then, perform a logical test to see if `simple` is equal to `compound`, and write out the results of the test in one sentence.\n\n6.  Retain the variables you created above and write a series of conditional (If else/Else If) statements according to the following rules: 1) If `simple` is less than `compound`, print the statement \"Simple interest is less than compound interest\"; 2) If `simple` is greater `compound`, print the statement \"Simple interest is greater than compound interest\"; 3) If `simple` is equal to `compound`, print the statement \"Simple interest is equal to compound interest\".\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","output-file":"stringscomps.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","bibliography":["references.bib"],"csl":"ama.csl","editor":"visual","grid":{"body-width":"850px"},"theme":"cerulean"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"stringscomps.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"csl":"ama.csl","editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}