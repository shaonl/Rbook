{
  "hash": "6aa8bc9fa2ef747e52c60d41c702f1cf",
  "result": {
    "markdown": "# Answers for @sec-dtex {#sec-appendixb}\n\n1.  Create a numeric vector called `vec1` comprising the elements `3, -12, 532, 0, -100, 55,` and `-42`. Then, find the median and lowest value in the vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec1 <- c(3, -12, 532, 0, -100, 55, -42) \n\nmedian(vec1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nmin(vec1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -100\n```\n:::\n:::\n\n\n\n2.  Create a new vector `vec2` which contains all the elements of `vec1` that are positive integers. Then create a new vector `vec3` that contains all the elements of `vec1` that are negative integers. Then create a new vector `vec4` which is the sum of `vec2` and `vec3`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec2 <- vec1[vec1 > 0]\nvec3 <- vec1[vec1 < 0]\nvec4 <- vec2 + vec3\n```\n:::\n\n\n\n3.  Assign the built-in dataframe `mtcars` to an object named after your favorite animal. Then calculate and print the median of the variable `mpg`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I'm a big donkey guy, but you can put your favorite animal for the name of the object.\ndonkey <- mtcars \n\nmedian(donkey$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 19.2\n```\n:::\n:::\n\n\n\n4.  Create a new variable and add to the object you created above (named after your favorite animal). This variable will take the variable Miles per Gallon `mpg` and convert it to Kilometers per Liter, which you will name `kpl`. This can be accomplished by taking `mpg` and dividing it by 2.352. Once you've created this new variable and added it to the object, calculate the median of `kpl`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndonkey$kpl <- donkey$mpg / 2.352\nmedian(donkey$kpl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8.163265\n```\n:::\n:::\n\n\n\n5.  Assign the built-in dataframe `OrchardSprays` to an object name of your choice. Then, convert the variable `treatment` to an ordered factor variable, and change the existing names of factor levels from A:H to a list of sulphur levels from `Sulpher_8` to `Sulpher_1`. Then, print the new `treatment` variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# I'll assign the built-in OrchardSprays dataframe to an object called sprays.\nsprays <- OrchardSprays\n\n# Next, I'll convert the treatment variable to an ordered factor variable.\n\nsprays$treatment <- factor(sprays$treatment,\n                           ordered = TRUE)\n\nsummary(sprays$treatment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA B C D E F G H \n8 8 8 8 8 8 8 8 \n```\n:::\n\n```{.r .cell-code}\n# Next, I'll replace the existing level names with new ones.\nsprays$treatment <- recode(sprays$treatment,\n                           A = \"Sulphur_8\",\n                           B = \"Sulphur_7\",\n                           C = \"Sulphur_6\",\n                           D = \"Sulphur_5\",\n                           E = \"Sulphur_4\",\n                           F = \"Sulphur_3\",\n                           G = \"Sulphur_2\",\n                           H = \"Sulphur_1\")\n\nprint(sprays$treatment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Sulphur_5 Sulphur_4 Sulphur_7 Sulphur_1 Sulphur_2 Sulphur_3 Sulphur_6\n [8] Sulphur_8 Sulphur_6 Sulphur_7 Sulphur_1 Sulphur_5 Sulphur_4 Sulphur_8\n[15] Sulphur_3 Sulphur_2 Sulphur_3 Sulphur_1 Sulphur_8 Sulphur_4 Sulphur_5\n[22] Sulphur_6 Sulphur_2 Sulphur_7 Sulphur_1 Sulphur_8 Sulphur_4 Sulphur_6\n[29] Sulphur_3 Sulphur_2 Sulphur_7 Sulphur_5 Sulphur_4 Sulphur_5 Sulphur_2\n[36] Sulphur_8 Sulphur_6 Sulphur_7 Sulphur_1 Sulphur_3 Sulphur_8 Sulphur_6\n[43] Sulphur_3 Sulphur_2 Sulphur_7 Sulphur_5 Sulphur_4 Sulphur_1 Sulphur_7\n[50] Sulphur_2 Sulphur_6 Sulphur_3 Sulphur_8 Sulphur_1 Sulphur_5 Sulphur_4\n[57] Sulphur_2 Sulphur_3 Sulphur_5 Sulphur_7 Sulphur_1 Sulphur_4 Sulphur_8\n[64] Sulphur_6\n8 Levels: Sulphur_8 < Sulphur_7 < Sulphur_6 < Sulphur_5 < ... < Sulphur_1\n```\n:::\n:::\n",
    "supporting": [
      "appdatatypes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}