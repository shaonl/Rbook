{
  "hash": "4e7c36d75fff2dcd3eac7216eb98ef97",
  "result": {
    "markdown": "# Data Visualization with base R and `ggplot2` {#sec-dataviz}\n\n![](Images/ggplot2%20logo.png){fig-align=\"center\" width=\"287\"}\n\nOne of the most powerful and versatile aspects of R is the ability it affords us for data visualization. More than creating pretty pictures, visualization is an important part of data analysis and science communication. Visualization can also be used to manipulate or mislead our understanding of a particular phenomenon, and can hide data. This is why it is essential to create visualizations that are clear, easy to follow, and reproducible.\n\nA full tutorial on data visualization can comprise its own book, and in fact, does. There are a number of books and other resources for data visualization in R which can help you choose the right visualization for the right data, along with several design principles. Three of these resources are presented in @tbl-datavizs below.\n\n| Resource name (with link)                                                                   | Author                                                    |\n|--------------------------------------------|----------------------------|\n| [Data Visualization with R](https://rkabacoff.github.io/datavis/)                           | Rob Kabacoff                                              |\n| [R for Data Science (2e) - Visualize (Chapters 10 to 12)](https://r4ds.hadley.nz/visualize) | Hadley Wickham, Mine Ã‡etinkaya-Rundel & Garrett Grolemund |\n| [The R Graph Gallery](https://r-graph-gallery.com/index.html)                               | Yan Holtz                                                 |\n\n: Resources for learning more about data visualization in R. {#tbl-datavizs}\n\nFor our purposes, we'll go over how to create some basic graphs using base R, and more aesthetically pleasing graphs using the `ggplot2` package. We'll illustrate some graphs using the `gapminder` dataframe from the `gapminder` library. So go ahead and install this library if you haven't already done so.\n\n## Visualizations in Base R\n\n### Bar graphs {#sec-baserbar}\n\nBar graphs are commonly used to illustrate differences between groups on some numeric measure. Usually the levels of a categorical variable are on one axis, and some sort of numeric measure on the other axis. The latter can be another variable, but can also be a summary measures such as counts, sums, means, or standard deviations. In base R, we can create a bar graph using the `barplot()` function. Let's say I want to compare the total population for the five continents in the `gapminder` dataframe for the year 1952.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\nlibrary(tidyverse)\n\n# First, I'll create a small dataframe which filters the dataframe by the year 1952. It then groups the dataframe by continent, and creates a new variable which adds up the total population by continent. It then divides this variable by a million, rounds to the nearest integer, and renames the columns.\n\nsumpop <- gapminder %>%\n  filter(year == \"1952\") %>%\n  group_by(continent) %>%\n  summarise(sum_pop = sum(pop)) %>%\n  mutate(sum_pop = round((sum_pop/1000000), digits = 0)) %>%\n  rename(\"Total Population (Millions)\" = sum_pop,\n         \"Continent\" = continent) \n\n\nhead(sumpop)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 2\n  Continent `Total Population (Millions)`\n  <fct>                             <dbl>\n1 Africa                              238\n2 Americas                            345\n3 Asia                               1395\n4 Europe                              418\n5 Oceania                              11\n```\n:::\n\n```{.r .cell-code}\n# Now, let's make a basic barplot.\n\nbarplot(sumpop$`Total Population (Millions)`,\n        names.arg = sumpop$Continent)\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-1-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nOk, that's not the prettiest bar graph in the world. Also the y-axis doesn't extend to the maximum value of the data. Let's change the y-axis limits with the `ylim` argument. Let's also add some color to the bars, add a title, and label the y-axis.\n\n::: callout-tip\n### Colors in R\n\nBefore we proceed, let's take a moment to review how to use colors for our visualizations in R. There are a number of ways to use colors in R. The first way is to simple write the name of the color like `\"red\"`, `\"beige\"`, `\"cyan\"` or more exotic color names such as `\"darkorchid2\"`, `\"goldenrod\"`, and `\"mistyrose\"`. In fact, there are 657 colors which you can currently call by name. The full list can be seen by running the `colors()` function. Of course, seeing a list of color names is not useful unless we already know how the colors look. To see a full list of all 657 colors along with their names, check out this [Data Novia page](https://www.datanovia.com/en/blog/awesome-list-of-657-r-color-names/).\n\nYou might want to choose colors based on a palette, often to illustrate progress on a gradient. Or you might just find it easier to look at a palette and see which colors work well together. In such cases, I recommend choosing an established color palette from the `RColorBrewer` package. You can load this library and use the `display.brewer.all()` function to get a list of color palettes. The palettes are listed in @fig-rpalettes below. You can then use the `brewer.pal()` function from the `RColorBrewer` package to add some colors to our visualizations. The first argument is the number of colors you want, and the second argument is the name of the palette.\n\n![The RColorBrewer package has a number of great color palettes.](Images/rpalettes.png){#fig-rpalettes}\n\nThere are also great color packages available through other packages. One of my favorites is the `wesanderson` package created by [Karthik Ram](https://github.com/karthik), which contain [color palettes from the movies of famous director Wes Anderson](https://wesandersonpalettes.tumblr.com).\n\nFinally, you can also invoke colors by hexadecimal number. The hexadecimal system is a numerical system of base-16. It uses 16 symbols to represent numbers (10 to 15 are represented with the letters A through F). A list of hexadecimal numbers can be found in @fig-hexs.\n\n![Hexadecimal color codes. Source: [VisiBone](https://html-color-codes.com).](/Images/hexad.png){#fig-hexs}\n\nWhen using the hexadecimal (or 'hex') number in the `col =` argument, make sure to add a hash \\# in front of the code (e.g. #00CCFF, #0033CC).\n:::\n\nOk, back to our barplot. Let's create one with named colors, labels, and a title.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(sumpop$`Total Population (Millions)`,  #this is the y-axis variable.\n        names.arg = sumpop$Continent,          # this is the x-axis variable.\n        col = c(\"forestgreen\", \"darkblue\", \"brown2\", \"gold1\", \"magenta4\"), # the color of the bars\n        ylim = c(0, 1400), # y-axis limit\n        ylab = \"Population (millions)\",\n        main = \"Total Population by Continent in 1952\"  # Title of graph.\n        )\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLooks good, but how about some colors from the Wes Anderson movie *The Royal Tenenbaums*? Why not!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(wesanderson)\n\n# Let's look at the second The Royal Tenenbaums palette.The first one only has four colors, but the second one has five.\n\nwes_palette(\"Royal2\")\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\npal1 <- wes_palette(\"Royal2\")\n\nbarplot(sumpop$`Total Population (Millions)`,  #this is the y-axis variable.\n        names.arg = sumpop$Continent,          # this is the x-axis variable.\n        col = pal1, # the color of the bars\n        ylim = c(0, 1400), # y-axis limit\n        ylab = \"Population (millions)\",\n        main = \"Total Population by Continent in 1952\"  # Title of graph.\n        )\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-3-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Histograms\n\nIf you have two numeric variables, you can examine the distribution of a variable based on values of another variable with a histogram. Even if you only want to examine the distribution of values in one variable, a histogram is a great approach. I commonly check the distribution of a variable quickly with the `hist()` function, where the first argument is the variable of interest. Other arguments can be used to add axis labels, titles, and axis limits. With a histogram, the number of bars or *bins* can be increased when you have many different values. This can be adjusted with the `breaks =` argument. Let's look at the distribution of the `mpg` variable in the `mtcars` dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A quick and basic histogram\nhist(mtcars$mpg)\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Let's add some color, labels, and axis limits.\nhist(mtcars$mpg, col = \"#FF3333\",\n     xlab = \"Miles Per Gallon\",\n     ylab = \"Count\",\n     main = \"Distribution of Miles Per Gallon\",\n     xlim = c(0, 40),\n     ylim = c(0, 15)\n     )\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-4-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Let's now increase the number of bins. If we do this with many unique values, we may need to adjust the y-axis limits since the frequency is more diffuse.\n\nhist(mtcars$mpg, col = \"#FF3333\",\n     xlab = \"Miles Per Gallon\",\n     ylab = \"Count\",\n     main = \"Distribution of Miles Per Gallon\",\n     xlim = c(0, 40),\n     ylim = c(0, 5),\n     breaks = 20\n     )\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-4-3.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Scatterplot {#sec-scatter}\n\nWhen we have two numeric variables and want to see the relationship between them, a scatterplot is ideal. This visualization is a series of dots on graph that shows the corresponding value of *y* for all values of *x* in the dataframe. This can be constructed using the `plot()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's create a scatterplot of miles per gallon and horsepower.\n\nplot(mtcars$mpg, mtcars$hp,\n     main = \"Scatterplot of miles per gallon and horesepower\",\n     xlab = \"Miles per Gallon\",\n     ylab = \"Horsepower\",\n     col = \"#FF00CC\",\n     ylim = c(30,350)\n     )\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWe can also change the shape of the points to other things, listed in @fig-rpch using the `pch =` argument. The size of the shape can be adjusted by specifying a number relative to the current size. For example `cex = 2` would double the default size of the shape, and `cex = 0.5` would reduce the size of the shape by 50%.\n\n![Different points that can be used on scatterplots.](/Images/rpch.png){#fig-rpch}\n\nFor instance, let's change the shape of the dots to the filled-in triangle (#17), and increase the size of the shapes by 50%.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mtcars$mpg, mtcars$hp,\n     main = \"Scatterplot of miles per gallon and horesepower\",\n     xlab = \"Miles per Gallon\",\n     ylab = \"Horsepower\",\n     col = \"#FF00CC\",\n     ylim = c(30,350), \n     cex = 1.5,\n     pch = 17\n     )\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nYou can export the images to certain formats using the corresponding functions - `jpeg()`, `png()`, `svg()`, and `pdf()`, where the first argument is the file path including the file name, and additional arguments that can be used to adjust the width and height of the image. After this command is run, we then create the plot, and then close the plot using the `dev.off()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Create export file.\n\npng(\"Scatterplot1.png\", \n    width = 750, \n    height = 500)\n\n# Step 2: Create plot.\nplot(mtcars$mpg, mtcars$hp,\n     main = \"Scatterplot of miles per gallon and horesepower\",\n     xlab = \"Miles per Gallon\",\n     ylab = \"Horsepower\",\n     col = \"LightSkyBlue\",\n     ylim = c(30,350),\n     pch = 19\n     )\n\n# Close file.\ndev.off()\n```\n:::\n\n\n\n## Visualizations in `ggplot2`\n\nOne of the best parts of the tidyverse is the `ggplot2` package for data visualization. The 'gg' in `ggplot2` stands for *grammar of graphics,* the namesake of a famous book by Leland Wilkinson. The books sets out a framework for layering elements to construct visualizations. If you've ever used graphic design software like *Photoshop* or *Canva*, you will note a similar idea behind layering different elements together. The creator of `ggplot2` - Hadley Wickham - was influenced by this approach, and extended this thinking in his paper *A Layered Grammar of Graphics.* @wickham_layered_2010\n\nOne of the main ideas behind the grammar of graphics influence on `ggplot2` is that each graphic can contain many layers of different things, but they all need at least three basic layers satisfied:\n\n-   Some **data** that you want to visualize. This is commonly one or more variables from a dataframe.\n\n-   Particular **aesthetics** (**aes** for short) which specify the axes and dimensions of the plot.\n\n-   A geometric object (**geom** for short) which refer to the type of plot we want (scatterplot, bar plot, etc).\n\nThere are other potential layers we can add to customize labels, add relevant statistics, use a different coordinate system, specify subplots, and more. Some of the main layers are presented in @fig-gglayers. Note that the bottom three are the most crucial as these form the basic building blocks of a ggplot.\n\n![Some of the main layers of ggplot2. At a minimum, you need the bottom three layers to create a ggplot.](/Images/gglayers.png){#fig-gglayers fig-align=\"center\" width=\"491\"}\n\n### Bar Graphs\n\nLet's return to the `gapminder` dataframe from the package of the same name. In @sec-baserbar we created bar graphs for population by continent for the year 1952. Let's do the same thing, but for the year 2007, and using `ggplot()` function to create our bar graph. Note that with bar graphs, we need the argument `stat = \"identity\"` within the `geom_bar()` layer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, let's create a smaller dataframe which filters the dataframe by the year 2007 It then groups the dataframe by continent, and creates a new variable which adds up the total population by continent. It then divides this variable by a million, and rounds to the nearest integer.\n\nsumpop2 <- gapminder %>%\n  filter(year == \"2007\") %>%\n  group_by(continent) %>%\n  summarise(sum_pop = sum(pop)) %>%\n  mutate(sum_pop = round((sum_pop/1000000), digits = 0))\n\nhead(sumpop2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 2\n  continent sum_pop\n  <fct>       <dbl>\n1 Africa        930\n2 Americas      899\n3 Asia         3812\n4 Europe        586\n5 Oceania        25\n```\n:::\n\n```{.r .cell-code}\n# Let's now create our bar graph to examine population by continent for the year 2007.\n\nggplot(sumpop2,                             ## Data layer\n       aes(x = continent, y = sum_pop)) +   ## Aesthetics layer\n  geom_bar(stat = \"identity\")               ## Geometry layer\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nThat's the basic bar graph. Let's add some colors using the `fill =` argument in the **aes** layer. We can also modify the colors by name or hex digit using the `scale_fill_manual()` function. We can also use a palette from the `RColorBrewer` package using the `scale_fill_brewer()` function. Additionally, we can also modify the legend position (including to omit it entirely) using the `theme(legend.position = )`argument. If we want to reorder the x-axis categories, we can do that using the `scale_x_discrete(limits =` function. We can also modify axis labels and the title of the plot using the `labs()` layer. Additionally, the grey background of the graph can seem pretty drab. To change the overall appearance of the plot, we can select one of a number of themes (see a list of themes on the [ggplot page](https://ggplot2.tidyverse.org/reference/ggtheme.html)). Personally, I like the theme called *minimal*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the \"fill =\" argument, we enter the variable we want to color.\nggplot(sumpop2,\n       aes(x = continent, y = sum_pop, fill = continent)) +\n  geom_bar(stat = \"identity\") \n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# We can change the colors by name or hex digit using scale_fill_manual().\nggplot(sumpop2,\n       aes(x = continent, y = sum_pop, fill = continent)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = c(\"#FF0000\", \"#FF00CC\", \"#3300FF\", \n                               \"#33FF00\", \"#CC9900\"))\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-9-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Let's use a palette from the RColorBrewer package, reorder the continents on the x-axis in descending order, get rid of the legend, change the axis labels, add a title for the plot, and use the minimal theme.\n\nggplot(sumpop2,\n       aes(x = continent, y = sum_pop, fill = continent)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_brewer(palette = \"Set1\") +\n  theme(legend.position = \"none\") +\n  scale_x_discrete(limits = c(\"Asia\", \"Africa\", \"Americas\",\n                              \"Europe\", \"Oceania\")) +\n  labs(title = \"Total Population by Continent in 2007\",\n       y = \"Total Population (Millions)\",\n       x = \"Continent\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-9-3.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nIt's starting to look nicer, right? There's plenty more we can do to customize this ggplot, including adding value labels right above each bar, which can improve the interpretability of the plot. We can also another variable in there to compare changes. For instance, let's say we want to look at the population in 1952 vs 2007 for each continent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, let's create a dataframe with population for the years 1952 and 2007 by continent. \nsumpop3 <- gapminder %>%\n  select(country, continent, year, pop) %>%\n  filter(year == \"1952\" | year == \"2007\") %>%\n  group_by(continent, year) %>%\n  summarise(total_pop = sum(pop)) %>%\n  mutate(total_pop = round((total_pop/1000000), digits = 0))\n  \nsumpop3$year <- as.factor(sumpop3$year)\n\nhead(sumpop3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n# Groups:   continent [3]\n  continent year  total_pop\n  <fct>     <fct>     <dbl>\n1 Africa    1952        238\n2 Africa    2007        930\n3 Americas  1952        345\n4 Americas  2007        899\n5 Asia      1952       1395\n6 Asia      2007       3812\n```\n:::\n\n```{.r .cell-code}\n# Now let's create side-by-side bar graphs (known as a dodged barplot) using the position = position_dodge() argument in geom_bar(). \n\nggplot(sumpop3,\n       aes(x = continent, y = total_pop, fill = year)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  scale_fill_brewer(palette = \"Set1\") +\n  theme(legend.position = \"none\") +\n  scale_x_discrete(limits = c(\"Asia\", \"Africa\", \"Americas\",\n                              \"Europe\", \"Oceania\")) +\n  labs(title = \"Total Population by Continent: 1952 vs 2007\",\n       y = \"Total Population (Millions)\",\n       x = \"Continent\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Now let's add value labels above each bar using the geom_text() layer.\n\nggplot(sumpop3,\n       aes(x = continent, y = total_pop, fill = year)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  scale_fill_brewer(palette = \"Set1\") +\n  theme(legend.position = \"none\") +\n  scale_x_discrete(limits = c(\"Asia\", \"Africa\", \"Americas\",\n                              \"Europe\", \"Oceania\")) +\n  labs(title = \"Total Population by Continent: 1952 vs 2007\",\n       y = \"Total Population (Millions)\",\n       x = \"Continent\") +\n  theme_minimal() +\n  geom_text(aes(label = total_pop),\n            vjust = 1.6,\n            color = \"white\",\n            position = position_dodge(0.9), size = 3.5)\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-10-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nOk, that looks good but because the bars for Oceania are so small, we can't see the value labels if they are placed inside the bar. So let's place them above the bars.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sumpop3,\n       aes(x = continent, y = total_pop, fill = year)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  scale_fill_brewer(palette = \"Set1\") +\n  theme(legend.position = \"none\") +\n  scale_x_discrete(limits = c(\"Asia\", \"Africa\", \"Americas\",\n                              \"Europe\", \"Oceania\")) +\n  labs(title = \"Total Population by Continent: 1952 vs 2007\",\n       y = \"Total Population (Millions)\",\n       x = \"Continent\") +\n  theme_minimal() +\n  geom_text(aes(label = total_pop),\n            vjust = -0.3,\n            color = \"black\",\n            position = position_dodge(0.9), size = 3.5)\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Histograms\n\nLet's say we want to look at the distribution for a numeric variable such as the Gross Domestic Product per capita variable in the original `gapminder` dataframe for the year 2007.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's create a dataframe with GDP across all countries for the year 2007.\n\nsumpop4 <- gapminder %>%\n  filter(year == \"2007\") \n\n# Now let's create a histogram.\nggplot(sumpop4,\n       aes(x = gdpPercap)) +\n  geom_histogram(fill = \"darkgreen\") +\n  theme_minimal() +\n  labs(x = \"GDP Per Capita ($US)\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nOk, that's not bad. Notice how R gave us the message `` `stat_bin()` using `bins = 30`. Pick better value with `binwidth` `` ? This means that the default number of bins (or bars) for a histogram in `ggplot` is 30. This message shows up because we didn't specify the exact number of bins. We can get rid of this message by specifying `bins = x` in the `geom_histogram()` layer, where `x` is some number of bins. We can also specify how data is covered by a single bin using the `binwidth =` argument.\n\n::: callout-tip\n## How many bins? How wide a bin?\n\nWhat is the optimal number of bins you should select for a histogram? There is no universally agreed-upon standard. Generally, there is a trade-off between too much and too little detail with histograms, so people often play around by trying different numbers of bins. Some folks have specified some rules of thumb, which we might consider as well. Neither of them are perfect, but they might be a useful starting point.\n\n### Sturge's Rule\n\n$$\nN_{bins}= 1 + 3.322 (log_x) \n$$\n\nwhere the number of bins $N_{bins}$ is equal to one plus 3.322 times the log of the number of observations in the data $log_x$. For our histogram above, we have 142 observations of countries' GDP per capita for the year 2007 from the `gapminder` dataframe. Thus, the number of bins we should use according to Sturge's Rule would be:\n\n$$\nN_{bins} = 1 + 3.322(log_{142}) \\\\\nlog(142) = 4.955827 \\\\\n3.322 * 4.955827 = 16.46326 \\\\\nN_{bins} = 1 + 16.46326 \\\\\nN_{bins} = 17.16 \\approx 17\n$$\n\n### Freedman-Diaconis Rule\n\n$$\nbinwidth = 2 \\frac{IQR(x)}{\\sqrt[3]{n}}\n$$\n\nwhere the width of a bin $binwidth$ is equal to 2 times the interquartile range of the variable $IQR(x)$ divided by the cubed root of the number of observations $\\sqrt[3]{n}$. For our histogram above, the IQR is 16,383.99. How did I know that? I just used the function `IQR()` with the variable `sumpop4$gdpPercap` as the argument. Thus, the width of each bin we should specify according to the Freedman-Diaconis Rule would be:\n\n$$\nbinwidth = 2 \\frac{16383.99}{\\sqrt[3]{142}} \\\\ \n\\sqrt[3]{142} = 5.217103 \\\\\n16383.99 / 5.217103 = 3140.438 \\\\\nbinwidth = 3140.438 * 2 = 6280.876\n$$\n\n### Rice's Rule\n\n$$\nN_{bins} = 2 * \\sqrt[3]{n}\n$$\n\nwhere the number of bins $N_{bins}$ is equal to twice the cubed root of the number of observations $2 * \\sqrt[3]{n}$. Thus, the number of bins for our histogram above according to Rice's Rule would be:\n\n$$\nN_{bins} = 2 * 5.217103 = 10.43 \\approx 10\n$$\n:::\n\nLet's plot and compare histograms using the three rules.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram using N_bins based on Sturge's Rule.\nggplot(sumpop4,\n       aes(x = gdpPercap)) +\n  geom_histogram(fill = \"darkgreen\", bins = 17) +\n  theme_minimal() +\n  labs(x = \"GDP Per Capita ($US)\") \n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Histogram using bin width based on the Freedman-Diaconis Rule.\nggplot(sumpop4,\n       aes(x = gdpPercap)) +\n  geom_histogram(fill = \"darkgreen\", binwidth = 6280.876) +\n  theme_minimal() +\n  labs(x = \"GDP Per Capita ($US)\") \n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-13-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Histogram using N_bins based on Rice's Rule.\nggplot(sumpop4,\n       aes(x = gdpPercap)) +\n  geom_histogram(fill = \"darkgreen\", bins = 10) +\n  theme_minimal() +\n  labs(x = \"GDP Per Capita ($US)\") \n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-13-3.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nIt looks like the histograms based on Rice's Rule and the Freedman-Diaconis Rule are fairly similar. You should try different combinations until you find one that looks right to you.\n\nWe can also add a vertical line in the histogram corresponding to the mean or median, which can be helpful to see the central tendency of the distribution using the `geom_vline()` layer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sumpop4,\n       aes(x = gdpPercap)) +\n  geom_histogram(fill = \"darkgreen\", \n                 bins = 15, \n                 color = \"white\") +\n  theme_minimal() +\n  labs(x = \"GDP Per Capita ($US)\") +\n  geom_vline(aes(xintercept = median(gdpPercap)), \n             color = \"black\",\n             linetype = \"dashed\") \n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Scatterplots\n\nI quite enjoy the scatterplots produced by `ggplot2` as they can be very visually appealing. As we know from @sec-scatter, scatterplots are used to examine the relationship between two numeric variables. Let's say I want to examine the life expectancy over time in the country of Oman from the `gapminder` dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, let's create a dataframe just for Oman\nlifexpoman <- gapminder %>%\n  filter(country == \"Oman\") \n\n# Next, let's create a basic scatterplot.\n\nggplot(data = lifexpoman,\n       aes(x = year,\n           y = lifeExp)) +\n  geom_point() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAlright, that's not bad. Let's modify our axis labels, add a title, modify our axes so they show the highest values, increase the size of the points, change the shape of the points, increase the size of the points, and add a loess smoother to the data. Loess refers to *locally weighted smoothing*, which provides a trend line to see patterns in our data more easily. We can add one using the `geom_smooth()` layer.\n\nTo change the type of shape, recall that you can specify a shape number from the list seen in @fig-rpch. BUT, You can also use a unicode character within parentheses! This opens up a lot of possibilities, as there are about 149,186 unicode characters available currently, covering different scripts, symbols, and even emojis. Wikipedia has a [nice list](https://en.wikipedia.org/wiki/List_of_Unicode_characters#:~:text=As%20of%20Unicode%20version%2015.0,and%20some%20additional%20related%20characters.) of unicode characters. Let's get especially wild, and select a unicode character corresponding to the Arabic letter Ø­ ('Hah'), which is first letter of the Arabic word *Ø­ÙŠØ§Ø© (Hayat)*, which means *Life*. Given that we are examining life expectancy in Oman, where the official language is Arabic, using the first letter of this Arabic word seems appropriate.\n\nTo make things even more interesting, instead of a point, let's also create a histogram where the shape corresponds to the flag of Oman. We can do this using the `ggimage` package's `geom_flag()` function which plays well with `ggplot2`. In this function, there is an `aes` argument that takes a country's[two-letter ISO Alpha-2 code](https://www.nationsonline.org/oneworld/country_code_list.htm). For Oman, the ISO code is 'OM'.\n\nYou've already seen how to change axis labels and the title using the `labs()` layer. To change the y-axis of a numeric variable, we can use the `scale_y_continuous()` function, and to change the x-axis, we can use the `scale_x_continuous()` function. These two functions have four important arguments:\n\n-   `breaks` which specifies a vector of numbers to display on the axis.\n-   `n.breaks` which specifies a number of total breaks on the axis.\n-   `labels` which specifies a vector of labels to use on the axis.\n-   `limits` which specifies the range of the axis.\n\nLet's now use these arguments to modify our scatterplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram with our changes and using a unicode symbol for the shape.\nggplot(data = lifexpoman,\n       aes(x = year,\n           y = lifeExp)) +\n  geom_point(size = 7,\n             shape = \"\\u062D\") +   # Unicode symbol for Arabic letter Ø­ ('Hah') from Wikipedia\n  theme_minimal() +\n  labs(title = \"Oman's Increasing Life Expectancy Over Time\",  # title and axis labels\n       y = \"Life Expectancy (Years)\",\n       x = \"Year\") +\n  scale_x_continuous(breaks = seq(1952, 2007, 5)) +   # modifying x-axis\n  scale_y_continuous(limits = c(30, 80)) +            # modifying y-axis\n  geom_smooth()                                       # Loess smoother\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-16-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Histogram with the flag of Oman for the shape.\nlibrary(ggimage) \n\nggplot(data = lifexpoman,\n       aes(x = year,\n           y = lifeExp)) +\n  geom_flag(aes(image = \"OM\"), size = 0.10) +       # This replaces our geom_point layer\n  theme_minimal() +\n  labs(title = \"Oman's Increasing Life Expectancy Over Time\",  # title and axis labels\n       y = \"Life Expectancy (Years)\",\n       x = \"Year\") +\n  scale_x_continuous(breaks = seq(1952, 2007, 5)) +   # modifying x-axis\n  scale_y_continuous(limits = c(30, 80)) +            # modifying y-axis\n  geom_smooth()                                       # Loess smoother\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-16-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAlright, that looks interesting! We can see a clear trend toward higher life expectancy in Oman over time. We've also seen how to input unicode and use a companion package to modify the shape. Let's illustrate a final few things with the scatterplot in `ggplot2`.\n\nIf we want to examine the relationship between two numeric variables by levels of a categorical variable, we can add this as color or shape dimension. In fact, we can add two categorical variables to the scatterplot (as the shape and color dimensions), but this can be make the plot too busy or overwhelming. Let's examine a scatterplot of life expectancy and GDP per capita among all countries and time points in the `gapminder` dataframe. We'll add a color dimension to examine the relationship by continent. Let's also specify the title for the legend using the `guides()` function. If we want to re-order the categories of the legend, we can simply re-order the categories of the factor variable first.\n\nAdditionally, we can create multiple subplots based on a categorical variable. For instance, let's create multiple scatterplots by year to look at the relationship between GDP per capita and life expectancy, with a color dimension for continent. We can create multiple subplots using the `facet_wrap()` function which takes a variable name preceded by a tilda `~` as its main argument. You can also facet on more than one variable, but this can be overwhelming so we'll stick to one variable for now. Finally, let's use `theme_bw()` to see the different subplots clearly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, let's re-order the factor variable continent in a particular order. Here, I choose to order the levels by population size.\ngapminder$continent <- factor(gapminder$continent,\n                              levels = c(\"Asia\",\n                            \"Africa\",\n                            \"Americas\",\n                            \"Europe\",\n                            \"Oceania\"))\n\n# Next, can make our scatterplot and add continent as the color dimension.\nggplot(data = gapminder,\n       aes(x = lifeExp,\n           y = gdpPercap,\n           color = continent)) +\n    geom_point(size = 2) +            # Makes the points bigger\n    theme_minimal() +\n  labs(title = \"Scatterplot of Life Expectancy and GDP Over Time\",  \n       y = \"GDP Per Capita (US $)\",\n       x = \"Life Expectancy (Years)\") +\n  scale_x_continuous(breaks = seq(20, 90, 10), # Displays ages 20 to 90 by intervals of 10.\n                     limits = c(20, 90)) +     # Bound the x-axis from 20 to 90.\n  guides(color = guide_legend(title = \"Continent\")) +  # Capitalize Continent in the legend\n  facet_wrap(~year)        # Create multiple subplots\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-17-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAlright, that doesn't look too bad. A couple of last things though. First, notice how there's an outlying point in the plots for 1952, 1957, 1962, 1967, 1972, and 1977? It's an outlier in terms of GDP per capita. Let's say we want to label that outlier on our plots. In this case, we can use the `ggrepel` package's `geom_text_repel()` function, which allows us to use tidyverse-style commands to identify outliers based on a rule. This will look clearer once we illustrate this. Second, we can also transform the scale of our axes should we wish to do so. A common transformation is to take the base 10 logarithm (or other logarithm) of axis values. Transformation can sometimes make patterns clearer. So, let's apply a base 10 log transformation to our y-axis using the `trans = 'log10'` argument within the `scale_y_continuous` function.\n\n\n\n::: {.cell messsage='false'}\n\n```{.r .cell-code}\nlibrary(ggrepel)\n\nggplot(gapminder,\n       aes(x = lifeExp,\n           y = gdpPercap,\n           color = continent)) +\n  geom_point() +\n  theme_bw() +\n  labs(title = \"Scatterplot of Life Expectancy and GDP Over Time\",  \n       y = \"GDP Per Capita (US $)\",\n       x = \"Life Expectancy (Years)\") +\n  scale_x_continuous(breaks = seq(20, 90, 10),\n                     limits = c(20, 90)) +\n  scale_y_continuous(trans = \"log10\") +\n  facet_wrap(~year) +\n  guides(color = guide_legend(title = \"Continent\")) +\n  geom_text_repel(data = . %>% \n                    filter(gdpPercap> 50000), \n                  aes(label = country), \n                  size = 3.5)\n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-18-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nHere we see scatterplots for all the years in the dataframe where the outlier is labelled (it's Kuwait!) thanks to `ggrepel`. In general, one should always aim for simplicity and clarity with such visualizations. Aggregate trends (such as combining all countries) can also mask smaller trends, so one should interpret such visualizations cautiously, and ideally paired with statistical analysis.\n\n### Violin Plots\n\nRemember how discussed using boxplots to visualize outliers and potentially illogical values in @sec-illexs ? You might be wondering why I didn't discuss boxplots in this section. The main reason is that boxplots can be misleading because they do not show the underlying distribution. Consider @fig-badbox from a blog post on boxplots written by the Data Visualization Society.\n\n![Boxplots give you some useful information but also conceal other important information. @desbarats_ive_2021](/Images/badbox.png){#fig-badbox}\n\nThe blog post I've cited in the image caption is definitely worth a read, and explain other pitfalls with boxplots. However, if you would like the information provided by a boxplot AND want to know the underlying distribution, the violin plot is an ideal option. They illustrate the distribution of a numeric variable as a mirror image on either side of a line. They can also have a box plot embedded them. To accomplish this, we can use the `geom_violin()` and `geom_boxplot` functions. Let's create a violin plot to examine the distribution of life expectancy in 1952 and 2007 across all continents, and then separately by continent.\n\n\n\n::: {.cell messsage='false'}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)   # Let's use some nice palettes.\n\n# First, let's create a dataframe for the years 1952 and 2007.\nlifeexp <- gapminder %>%\n  filter(year == \"1952\" |\n           year == \"2007\") \n\n# We need to make sure the x-axis variable is factor.\nlifeexp$year <- as.factor(lifeexp$year)\n\n# Let's then create violin plots for the years 1952 and 2007.\nggplot(lifeexp,\n       aes(y = lifeExp,\n           x = year,\n           fill = year)) +\n  geom_violin(trim = FALSE) +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  scale_fill_brewer(palette = \"Set1\") +\n  labs(title = \"Life Expectancy in 1952 vs 2007\",  \n       y = \"Life Expectancy (Years)\",\n       x = \"Year\") +\n  scale_y_continuous(breaks = seq(20, 90, 10),  \n                     limits = c(20, 90))  \n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-19-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Then we'll do two more things - add a boxplot within the violin plot and create subplots by continent. Again, we'll use the bw theme to more easily distinguish between subplots.\nggplot(lifeexp,\n       aes(y = lifeExp,\n           x = year,\n           fill = year)) +\n  geom_violin(trim = FALSE) +\n  geom_boxplot(width = 0.1) +\n  theme_bw() +\n  theme(legend.position = \"none\") +\n  labs(title = \"Life Expectancy in 1952 vs 2007\",  \n       y = \"Life Expectancy (Years)\",\n       x = \"Year\") +\n  facet_wrap(~continent) +\n  scale_fill_brewer(palette = \"Set1\") +\n  scale_y_continuous(breaks = seq(20, 90, 10),  \n                     limits = c(20, 90))  \n```\n\n::: {.cell-output-display}\n![](dataviz_files/figure-pdf/unnamed-chunk-19-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nThe violin plots show how the life expectancy distribution across all continents looked quite different in 1952 compared with 2007. In 1952, we can see a clear mode around 40 years, and in 2007 the mode shifted to 75. When broken down by continent, we can see a similar pattern in Asia, and different patterns in other continents.\n\nIn this way, the violin plot is a great tool to visualize distributions between groups, and you can think of them as the ideal complement to a box plot.\n",
    "supporting": [
      "dataviz_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}